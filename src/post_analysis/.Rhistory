plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
segs = list()
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1)
ggplot.canvas <- ggplot.canvas %+%
geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
return(ggplot.canvas)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
segs = list()
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1)
ggplot.canvas <- ggplot.canvas %+%
geom_segment(aes_string(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
return(ggplot.canvas)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
plotAllLayers(canv1.2)
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
segs = list()
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1)
ggplot.canvas <- ggplot.canvas + geom_segment(aes_string(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
return(ggplot.canvas)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
positions2.data.frame(fake_position, c(1,1,2))
canv.1 = init_canvas(fake_position, c(1,1,2))
canv1.1 = plot_points(canv.1)
# initialization
positions2.data.frame <- function(latent_positions, nodes.type = NULL){
return(data.frame(
x = latent_positions[1,],
y = latent_positions[2,],
nodes.type = as.factor(nodes.type)
))
}
init_canvas <- function(latent_positions, nodes.type){
ggplot(positions2.data.frame(latent_positions, nodes.type)) + theme_minimal()
}
positions2.data.frame(fake_position, c(1,1,2))
canv.1 = init_canvas(fake_position, c(1,1,2))
canv1.1 = plot_points(canv.1)
# building blocks..
plot_points <- function(ggplot.canvas, nodes.set){
(ggplot.canvas +
geom_point(aes(
x = x,
y = y,
shape = nodes.type
),
size = 2
))
}
canv1.1 = plot_points(canv.1)
canv1.1 + geom_segment(aes(x = x[c(T,T,F)], y = y[c(T,T,F)], xend = x[c(F,T,T)], yend = y[c(F,T,T)]))
fake_adj = matrix(0, ncol = 3, nrow = 3)
fake_adj[1,3] = 1
fake_adj[3,1] = 1
fake_adj[2,3] = 1
fake_adj[3,2] = 1
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.1
canv1.2 <- plot_edges(canv1.1, fake_adj)
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
segs = list()
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1)
ggplot.canvas <- ggplot.canvas + geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
return(ggplot.canvas)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
temp = ggplot.canvas
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1)
temp <- temp + geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
return(temp)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
temp <- ggplot.canvas
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1)
temp <- temp + geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
return(temp)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
rm()
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
temp <- ggplot.canvas + geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
ggplot.canvas <- temp
rm(temp)
}
}
}
return(ggplot.canvas)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
show(c(i,j))
temp <- ggplot.canvas + geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
ggplot.canvas <- temp
rm(temp)
}
}
}
return(ggplot.canvas)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
canv1.2 + geom_segment(aes(x=x[1],y=y[1],xend=x[3],yend=y[3])) +
geom_segment(aes(x=x[2],y=y[2],xend=x[3],yend=y[3]))
paste(1,2)
paste(1,2,3)
eval("1 2 3")
eval("1+23")
help(eval)
expression()
expression("1+223")
eval(expression("1+223"))
eval(expression(1+223))
eval(as.expression("1+223"))
"1" + "2"
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
temp <- ggplot.canvas
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
show(c(i,j))
temp <- temp + geom_segment(aes(x = x[i], y = y[i], xend = x[j], yend = y[j]))
}
}
}
return(temp)
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
canv1.2
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = ""
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x["
i, "], y = y["
i, "], xend = x["
j, "], yend = y["
j, "]))")
}
}
}
eval(parse(geom_expr))
}
paste("2","3","+fdsa")
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = ""
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
eval(parse(geom_expr))
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
eval(parse(geom_expr))
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
show(geom_expr)
eval(parse(geom_expr))
}
canv1.2 <- plot_edges(canv1.1, fake_adj)
# for undirected graph
plot_edges_command <- function(canvas_name, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = canvas_name
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
show(geom_expr)
return(geom_expr)
}
canv1.2 = eval(parse(canv1.2.name))
canv1.2.name <- plot_edges("canv1.1", fake_adj)
# for undirected graph
plot_edges_command <- function(canvas_name, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = canvas_name
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
show(geom_expr)
return(geom_expr)
}
canv1.2.name <- plot_edges("canv1.1", fake_adj)
canv1.2 = eval(parse(canv1.2.name))
# for undirected graph
plot_edges_command <- function(canvas_name, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = canvas_name
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
show(geom_expr)
return(geom_expr)
}
canv1.2.name <- plot_edges("canv1.1", fake_adj)
canv1.2.name <- plot_edges_command("canv1.1", fake_adj)
canv1.2 = eval(parse(canv1.2.name))
eval(parse("1 + 1"))
canv1.2 = eval(parse(text = canv1.2.name))
canv1.2
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]))")
}
}
}
return(eval(parse(text = geom_expr)))
}
canv1.2.name <- plot_edges(canv1.1, fake_adj)
canv1.2.name
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.5)", sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
canv1.2.name <- plot_edges(canv1.1, fake_adj)
canv1.2.name
# for undirected graph
plot_edges <- function(ggplot.canvas, adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:(n_nodes-1)){
for(j in (i+1):n_nodes){
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1)", sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
canv1.2.name <- plot_edges(canv1.1, fake_adj)
canv1.2.name
continue
for(i in 1:10){ if(i==5) next else show(i)}
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1, arrow = arrow()))", sep="")
}
# for directed graph
plot_arrows <- function(ggplot.canvas,adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:n_nodes){
for(j in 1:n_nodes){
if(i == j) next
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1, arrow = arrow()))", sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
canv1.2.name <- plot_arrows(canv1.1, fake_adj)
# for directed graph
plot_arrows <- function(ggplot.canvas,adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:n_nodes){
for(j in 1:n_nodes){
if(i == j) next
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1, arrow = arrow())", sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
canv1.2.name <- plot_arrows(canv1.1, fake_adj)
canv1.2.name
# for directed graph
plot_arrows <- function(ggplot.canvas,adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:n_nodes){
for(j in 1:n_nodes){
if(i == j) next
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1, arrow = arrow(length = unit(0.03, "npc")))", sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
# for directed graph
plot_arrows <- function(ggplot.canvas,adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:n_nodes){
for(j in 1:n_nodes){
if(i == j) next
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1, arrow = arrow(length = unit(0.03, 'npc')))", sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
canv1.2.name <- plot_arrows(canv1.1, fake_adj)
canv1.2.name
canv1.1.name <- plot_arrows(canv1.1, fake_adj)
canv1.1.name
canv1.1.name
# for directed graph
plot_arrows <- function(ggplot.canvas,adj_matrix){
n_nodes = ncol(adj_matrix)
geom_expr = "ggplot.canvas"
# loop through all edges
for(i in 1:n_nodes){
for(j in 1:n_nodes){
if(i == j) next
if(adj_matrix[i,j] == 1){
geom_expr <- paste(geom_expr, "+ geom_segment(aes(x = x[",
i, "], y = y[",
i, "], xend = x[",
j, "], yend = y[",
j, "]), size = 0.1,
arrow = arrow(length = unit(0.03, 'npc')))",
sep="")
}
}
}
return(eval(parse(text = geom_expr)))
}
